---
// components/LanguageSelector.astro
import { ChevronDown, Languages } from 'lucide-astro';
import { getLangFromUrl, type Lang } from '@/i18n/langUtils';
import { getLanguageSelectorTranslations } from '@/i18n/features/shared/languageSelector';

const { isMobile = false } = Astro.props;
// Use Astro.locals.lang if available (from middleware), otherwise use getLangFromUrl
const currentLang = (Astro.locals.lang as Lang) || getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const t = getLanguageSelectorTranslations(currentLang);

const languageOptions = [
  {
    code: 'ru' as Lang,
    name: 'RU',
    fullName: t.languageNames.ru,
    shortcut: 'Alt+R'
  },
  {
    code: 'uz' as Lang,
    name: 'UZ',
    fullName: t.languageNames.uz,
    shortcut: 'Alt+U'
  },
  {
    code: 'en' as Lang,
    name: 'EN',
    fullName: t.languageNames.en,
    shortcut: 'Alt+E'
  }
];

const currentLanguage = languageOptions.find(lang => lang.code === currentLang) || languageOptions[0];

function getPathForLang(lang: Lang) {
  // If we're at the root path of a language, go to the new language root
  if (currentPath === `/${currentLang}` || currentPath === `/${currentLang}/`) {
    return `/${lang}/`;
  }
  
  // Otherwise, replace the language prefix in the path
  return currentPath.replace(new RegExp(`^/${currentLang}`), `/${lang}`);
}
---

{!isMobile && (
  <div class="relative language-selector-container">
    <button
      type="button"
      class="flex items-center gap-1.5 text-gray-600 hover:text-blue-600 py-1.5 px-2.5 rounded-lg hover:bg-gray-50 transition-colors duration-200 language-selector-button"
      aria-expanded="false"
      aria-haspopup="true"
      aria-label={t.selectLanguage}
    >
      <Languages class="w-5 h-5" />
      <span class="text-sm font-medium">{currentLanguage.name}</span>
      <ChevronDown class="w-4 h-4 ml-0.5 chevron-icon" />
    </button>

    <div
      class="absolute right-0 z-50 mt-1 w-40 origin-top-right rounded-lg shadow-md hidden bg-white border border-gray-100 language-selector-menu"
      role="menu"
      aria-orientation="vertical"
      tabindex="-1"
    >
      <div class="py-1.5" role="none">
        {languageOptions.map((language) => (
          <a
            href={getPathForLang(language.code)}
            class:list={[
              "flex items-center px-3 py-2 text-sm transition-colors duration-200 justify-between",
              currentLang === language.code
                ? "text-blue-600 bg-blue-50"
                : "text-gray-600 hover:bg-gray-50 hover:text-blue-600"
            ]}
            role="menuitem"
            tabindex="-1"
            data-astro-reload
            hreflang={language.code}
            lang={language.code}
            rel="alternate"
            title={`${language.fullName} - ${language.shortcut}`}
          >
            <span>{language.name}</span>
            {currentLang === language.code && (
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 ml-auto">
                <polyline points="20 6 9 17 4 12"></polyline>
              </svg>
            )}
            <span class="text-xs text-gray-400 ml-auto hidden md:inline">{language.shortcut}</span>
          </a>
        ))}
      </div>
    </div>
  </div>
)}

<script>
  document.addEventListener('astro:page-load', () => {
    const containers = document.querySelectorAll('.language-selector-container');
    
    containers.forEach(container => {
      const button = container.querySelector('.language-selector-button');
      const menu = container.querySelector('.language-selector-menu');
      const chevron = container.querySelector('.chevron-icon');
      
      if (!button || !menu || !chevron) return;
      
      let isOpen = false;
      
      function toggleMenu() {
        isOpen = !isOpen;
        if (menu) menu.classList.toggle('hidden', !isOpen);
        if (button) button.setAttribute('aria-expanded', String(isOpen));
        if (chevron) chevron.classList.toggle('rotate-180', isOpen);
      }
      
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleMenu();
      });
      
      document.addEventListener('click', (e) => {
        if (!container.contains(e.target as Node)) {
          isOpen = false;
          if (menu) menu.classList.add('hidden');
          if (button) button.setAttribute('aria-expanded', 'false');
          if (chevron) chevron.classList.remove('rotate-180');
        }
      });
      
      // Add keyboard shortcuts for language switching
      document.addEventListener('keydown', (e: Event) => {
        const keyboardEvent = e as KeyboardEvent;
        if (keyboardEvent.altKey) {
          const key = keyboardEvent.key.toLowerCase();
          if (key === 'u') { // Uzbek
            window.location.href = container.querySelector('a[hreflang="uz"]')?.getAttribute('href') || '/uz/';
          } else if (key === 'r') { // Russian
            window.location.href = container.querySelector('a[hreflang="ru"]')?.getAttribute('href') || '/ru/';
          } else if (key === 'e') { // English
            window.location.href = container.querySelector('a[hreflang="en"]')?.getAttribute('href') || '/en/';
          }
        }
      });
      
      // Keyboard navigation within menu
      if (menu) {
        menu.addEventListener('keydown', (e: Event) => {
          const keyboardEvent = e as KeyboardEvent;
          const options = menu.querySelectorAll('a');
          const currentIndex = Array.from(options).findIndex(option => option === document.activeElement);
          
          if (keyboardEvent.key === 'ArrowDown') {
            keyboardEvent.preventDefault();
            const nextIndex = (currentIndex + 1) % options.length;
            (options[nextIndex] as HTMLElement).focus();
          } else if (keyboardEvent.key === 'ArrowUp') {
            keyboardEvent.preventDefault();
            const prevIndex = (currentIndex - 1 + options.length) % options.length;
            (options[prevIndex] as HTMLElement).focus();
          } else if (keyboardEvent.key === 'Escape') {
            isOpen = false;
            menu.classList.add('hidden');
            if (button) {
              button.setAttribute('aria-expanded', 'false');
              (button as HTMLElement).focus();
            }
            if (chevron) chevron.classList.remove('rotate-180');
          }
        });
      }
    });
  });
</script>
