---
// OfferPopup.astro
import { getTranslation } from '@/i18n/translationUtils';
import type { Lang } from '@/i18n/langUtils';
import { X } from 'lucide-astro';

interface Props {
  lang: Lang;
  autoShow?: boolean;
}

const { lang, autoShow = true } = Astro.props;
const t = (key: string) => getTranslation(lang, key);

type InputType = 'text' | 'tel';

interface FormField {
  id: string;
  type: InputType;
  required: boolean;
  defaultPlaceholder: string;
}

const formFields: FormField[] = [
  { id: 'name', type: 'text', required: true, defaultPlaceholder: 'Your full name' },
  { id: 'phone', type: 'tel', required: true, defaultPlaceholder: 'Your phone number' }
];
---

<div id="offerPopup" class="popup-overlay">
  <div class="popup-content">
    <button id="closePopup" class="popup-close" aria-label="Close popup">
      <X class="h-5 w-5" />
    </button>
    
    <div class="popup-body">
      <div class="popup-header">
        <h3 class="text-2xl font-extrabold mb-3 text-gray-800">{t('popup.title') || 'Get a Free Consultation'}</h3>
        <p class="text-gray-600 text-base leading-relaxed">{t('popup.description') || 'Just leave your contact details and we\'ll help you find the perfect educational opportunity abroad'}</p>
      </div>
      
      <form id="popupForm">
        {formFields.map(field => (
          <div class="form-group">
            <label for={field.id} class="form-label">{t(`contact.form.${field.id}._value`) || field.id.charAt(0).toUpperCase() + field.id.slice(1)}</label>
            <input
              type={field.type}
              id={field.id}
              name={field.id}
              placeholder={t(`contact.form.${field.id}.placeholder`) || field.defaultPlaceholder}
              required={field.required}
              class="form-input"
            />
          </div>
        ))}
        
        <button type="submit" class="submit-btn">{t('contact.form.submit') || 'Get My Free Consultation'}</button>
      </form>
      
      <p class="privacy-text">
        {t('contact.form.privacy.text') || 'By submitting this form, you agree to our'}{' '}
        <a href="/privacy-policy">{t('contact.form.privacy.link') || 'privacy policy'}</a>
      </p>
    </div>
  </div>
</div>

<style>
  .popup-overlay {
    @apply fixed inset-0 bg-gray-900/50 z-50 flex items-center justify-center p-4 opacity-0 invisible;
    backdrop-filter: blur(3px);
    transition: 0.3s ease;
  }
  
  .popup-overlay.active {
    @apply opacity-100 visible;
  }
  
  .popup-content {
    @apply bg-white rounded-xl shadow-xl w-full max-w-md mx-auto relative overflow-y-auto max-h-[90vh];
    transform: translateY(20px);
    transition: transform 0.4s cubic-bezier(0.16, 1, 0.3, 1);
  }
  
  .popup-overlay.active .popup-content {
    transform: translateY(0);
  }
  
  .popup-close {
    @apply absolute top-3 right-3 text-gray-500 hover:text-gray-700 transition-all duration-300 
           bg-white/80 rounded-full p-1.5 hover:bg-gray-100;
  }
  
  .popup-body {
    @apply p-6 sm:p-8;
  }
  
  .popup-header {
    @apply text-center mb-8;
  }
  
  .popup-header h3 {
    @apply text-2xl font-extrabold mb-3 text-gray-800;
    letter-spacing: -0.01em;
  }
  
  .popup-header p {
    @apply text-gray-600 text-base leading-relaxed;
  }
  
  .form-group {
    @apply mb-6;
  }
  
  .form-label {
    @apply block text-sm font-semibold text-gray-700 mb-2;
    letter-spacing: 0.01em;
  }
  
  .form-input {
    @apply w-full px-4 py-3.5 border-2 border-gray-300 rounded-lg focus:ring-2 
           focus:ring-primary-500 focus:border-primary-500 outline-none transition-all
           text-gray-800 shadow-sm;
    letter-spacing: 0.01em;
  }
  
  .form-input::placeholder {
    @apply text-gray-400;
  }
  
  .form-input:hover {
    @apply border-primary-400 shadow-md;
  }
  
  .submit-btn {
    @apply w-full bg-primary-600 hover:bg-primary-700 text-white px-6 py-4 rounded-lg 
           font-bold transition-all duration-300 hover:shadow-lg mt-4 text-base;
    letter-spacing: 0.02em;
  }
  
  .privacy-text {
    @apply text-xs text-gray-500 text-center mt-5;
  }
  
  .privacy-text a {
    @apply text-primary-600 hover:underline font-medium;
  }
</style>

<script define:vars={{ autoShow }}>
  // Initialize popup on load
  function initPopup() {
    // Storage keys
    const SESSION_KEY = 'offer_popup_session';
    const INTERACTION_KEY = 'user_has_interacted';
    
    // Check if popup was shown in this session
    const wasShownInSession = () => {
      try {
        return sessionStorage.getItem(SESSION_KEY) === 'true';
      } catch (e) {
        return false;
      }
    };
    
    // Mark popup as shown in this session
    const markShownInSession = () => {
      try {
        sessionStorage.setItem(SESSION_KEY, 'true');
      } catch (e) {
        // Ignore storage errors
      }
    };
    
    // Check if user has interacted with the page
    const hasUserInteracted = () => {
      try {
        return sessionStorage.getItem(INTERACTION_KEY) === 'true';
      } catch (e) {
        return false;
      }
    };
    
    // Mark that user has interacted with the page
    const markUserInteracted = () => {
      try {
        sessionStorage.setItem(INTERACTION_KEY, 'true');
      } catch (e) {
        // Ignore storage errors
      }
    };
    
    // Setup interaction tracking
    const setupInteractionTracking = () => {
      const interactionEvents = ['click', 'touchstart', 'keydown', 'mousemove'];
      const trackInteraction = () => {
        markUserInteracted();
        // Remove event listeners once interaction is detected
        interactionEvents.forEach(event => {
          document.removeEventListener(event, trackInteraction);
        });
      };
      
      interactionEvents.forEach(event => {
        document.addEventListener(event, trackInteraction);
      });
    };
    
    const popup = {
      el: document.getElementById('offerPopup'),
      form: document.getElementById('popupForm'),
      closeBtn: document.getElementById('closePopup'),
      shown: false,
      
      init() {
        if (!this.el) return;
        
        this.setupEventListeners();
        
        // Only setup automatic triggers if autoShow is true and popup wasn't already shown
        if (autoShow && !wasShownInSession()) {
          setupInteractionTracking();
          this.setupAutoTriggers();
        }
      },
      
      show() {
        if (!this.shown && this.el) {
          this.el.classList.add('active');
          document.body.style.overflow = 'hidden';
          this.shown = true;
          markShownInSession();
        }
      },
      
      hide() {
        if (this.el) {
          this.el.classList.remove('active');
          document.body.style.overflow = '';
          this.shown = false;
        }
      },
      
      setupEventListeners() {
        // Close button and overlay click
        if (this.closeBtn) {
          this.closeBtn.addEventListener('click', () => this.hide());
        }
        
        this.el.addEventListener('click', (e) => {
          if (e.target === this.el) this.hide();
        });
        
        // Escape key to close
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.shown) {
            this.hide();
          }
        });
        
        // Form submission
        if (this.form) {
          this.form.addEventListener('submit', this.handleSubmit.bind(this));
        }
      },
      
      setupAutoTriggers() {
        // Only show popup if user scrolls to the middle of the page
        const handleScroll = () => {
          // Show popup when user scrolls to 50% of the page height
          const scrollPercentage = (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100;
          if (!this.shown && scrollPercentage > 40) {
            this.show();
            window.removeEventListener('scroll', handleScroll);
          }
        };
        
        window.addEventListener('scroll', handleScroll);
        
        // Show popup after a delay if user hasn't interacted
        const isMobile = window.innerWidth < 768;
        const delayTime = isMobile ? 45000 : 60000; // 45 seconds on mobile, 60 seconds on desktop
        
        setTimeout(() => {
          if (!this.shown && !hasUserInteracted()) {
            this.show();
          }
        }, delayTime);
      },
      
      async handleSubmit(e) {
        e.preventDefault();
        const form = e.target;
        const submitBtn = form.querySelector('button[type="submit"]');
        
        try {
          submitBtn.disabled = true;
          submitBtn.textContent = 'Sending...';
          
          // Simulate API call
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          alert('Thank you! Our China education specialist will call you shortly.');
          form.reset();
          this.hide();
        } catch (error) {
          alert('An error occurred. Please try again.');
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = t('contact.form.submit') || 'Get My Free Consultation';
        }
      }
    };
    
    // Initialize the popup
    popup.init();
    
    // Expose to global scope
    window.showOfferPopup = () => popup.show();
  }
  
  // Handle initialization timing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPopup);
  } else {
    initPopup();
  }
</script>
