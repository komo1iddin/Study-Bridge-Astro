---
import { languages, defaultLang, type Lang } from '@/i18n/langUtils';

// Get the current language and path from the URL
const { pathname } = Astro.url;
const currentLang = (Astro.locals.lang || defaultLang) as Lang;

// Function to generate language-specific paths
function getLocalizedPath(lang: Lang): string {
  // If we're at the root path of a language, go to the new language root
  if (pathname === `/${currentLang}` || pathname === `/${currentLang}/`) {
    return `/${lang}/`;
  }
  
  // Otherwise, replace the language prefix in the path
  return pathname.replace(new RegExp(`^/${currentLang}`), `/${lang}`);
}

// Get language display names
const languageNames: Record<Lang, string> = {
  uz: "O'zbekcha",
  ru: "Русский",
  en: "English"
};

// Keyboard shortcuts for languages
const shortcuts: Record<Lang, string> = {
  uz: 'Alt+U',
  ru: 'Alt+R',
  en: 'Alt+E'
};
---

<div class="language-selector-wrapper">
  <div class="language-selector" id="language-selector">
    <button 
      id="language-selector-toggle"
      aria-haspopup="true"
      aria-expanded="false"
      aria-label="Select language"
      class="language-selector-button"
    >
      <span class="current-language">{languageNames[currentLang]}</span>
      <svg width="10" height="6" viewBox="0 0 10 6" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M1 1L5 5L9 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    
    <div class="language-dropdown" id="language-dropdown">
      <ul role="menu">
        {languages.map(lang => (
          <li role="menuitem">
            <a 
              href={getLocalizedPath(lang)} 
              class={`language-option ${lang === currentLang ? 'active' : ''}`}
              aria-current={lang === currentLang ? 'true' : 'false'}
              hreflang={lang}
              lang={lang}
              rel="alternate"
              title={`${languageNames[lang]} - ${shortcuts[lang]}`}
            >
              <span>{languageNames[lang]}</span>
              {lang === currentLang && (
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="check-icon">
                  <polyline points="20 6 9 17 4 12"></polyline>
                </svg>
              )}
              <span class="shortcut">{shortcuts[lang]}</span>
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</div>

<script>
  function setupLanguageSelector() {
    const toggleButton = document.getElementById('language-selector-toggle');
    const dropdown = document.getElementById('language-dropdown');
    
    // Toggle dropdown on button click
    toggleButton?.addEventListener('click', () => {
      const expanded = toggleButton.getAttribute('aria-expanded') === 'true';
      toggleButton.setAttribute('aria-expanded', String(!expanded));
      dropdown?.classList.toggle('show');
      
      if (!expanded) {
        // Focus the first language option when opening
        const firstOption = dropdown?.querySelector('a') as HTMLElement | null;
        firstOption?.focus();
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      const selector = document.getElementById('language-selector');
      if (selector && !selector.contains(event.target as Node)) {
        toggleButton?.setAttribute('aria-expanded', 'false');
        dropdown?.classList.remove('show');
      }
    });
    
    // Keyboard shortcuts for languages
    document.addEventListener('keydown', (event) => {
      if (event.altKey) {
        const key = event.key.toLowerCase();
        if (key === 'u') { // Uzbek
          window.location.href = document.querySelector('a[hreflang="uz"]')?.getAttribute('href') || '/uz/';
        } else if (key === 'r') { // Russian
          window.location.href = document.querySelector('a[hreflang="ru"]')?.getAttribute('href') || '/ru/';
        } else if (key === 'e') { // English
          window.location.href = document.querySelector('a[hreflang="en"]')?.getAttribute('href') || '/en/';
        }
      }
    });
    
    // Keyboard navigation within dropdown
    dropdown?.addEventListener('keydown', (event) => {
      const options = dropdown.querySelectorAll('a');
      const currentIndex = Array.from(options).findIndex(option => option === document.activeElement);
      
      if (event.key === 'ArrowDown') {
        event.preventDefault();
        const nextIndex = (currentIndex + 1) % options.length;
        (options[nextIndex] as HTMLElement).focus();
      } else if (event.key === 'ArrowUp') {
        event.preventDefault();
        const prevIndex = (currentIndex - 1 + options.length) % options.length;
        (options[prevIndex] as HTMLElement).focus();
      } else if (event.key === 'Escape') {
        toggleButton?.setAttribute('aria-expanded', 'false');
        dropdown.classList.remove('show');
        toggleButton?.focus();
      }
    });
  }
  
  // Setup on load and after navigation
  document.addEventListener('DOMContentLoaded', setupLanguageSelector);
  document.addEventListener('astro:page-load', setupLanguageSelector);
</script>

<style>
  .language-selector-wrapper {
    position: relative;
    z-index: 100;
  }
  
  .language-selector {
    position: relative;
    display: inline-flex;
    align-items: center;
  }
  
  .language-selector-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: transparent;
    border: 1px solid var(--border-color, rgba(0, 0, 0, 0.1));
    border-radius: 0.375rem;
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 500;
    transition: background-color 0.2s, border-color 0.2s;
  }
  
  .language-selector-button:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }
  
  .language-selector-button:focus-visible {
    outline: 2px solid var(--accent-color, #3b82f6);
    outline-offset: 1px;
  }
  
  .language-dropdown {
    display: none;
    position: absolute;
    top: calc(100% + 0.25rem);
    right: 0;
    min-width: 10rem;
    background: white;
    border: 1px solid var(--border-color, rgba(0, 0, 0, 0.1));
    border-radius: 0.375rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    z-index: 50;
  }
  
  .language-dropdown.show {
    display: block;
    animation: fadeIn 0.15s ease-out;
  }
  
  .language-dropdown ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .language-option {
    display: flex;
    align-items: center;
    padding: 0.625rem 1rem;
    color: var(--text-color, #111827);
    text-decoration: none;
    font-size: 0.875rem;
    transition: background-color 0.15s;
    cursor: pointer;
    justify-content: space-between;
  }
  
  .language-option:hover, .language-option:focus {
    background-color: rgba(0, 0, 0, 0.05);
    outline: none;
  }
  
  .language-option.active {
    font-weight: 600;
    color: var(--accent-color, #3b82f6);
  }
  
  .check-icon {
    height: 1rem;
    width: 1rem;
    margin-left: 0.5rem;
  }
  
  .shortcut {
    margin-left: auto;
    opacity: 0.5;
    font-size: 0.75rem;
    padding-left: 0.75rem;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-0.25rem);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @media (max-width: 640px) {
    .shortcut {
      display: none;
    }
  }
</style> 