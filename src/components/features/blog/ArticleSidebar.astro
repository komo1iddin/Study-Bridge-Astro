---
interface Props {
  sections: { id: string, title: string }[];
}

const { sections } = Astro.props;

// Map section IDs to appropriate icons
const getSectionIcon = (id: string) => {
  const iconMap: Record<string, string> = {
    'intro': 'book',
    'why-study-in-china': 'graduation-cap',
    'application-process': 'file-text',
    'language-requirements': 'languages',
    'living-in-china': 'users',
    'cultural-adaptation': 'globe',
    'career-opportunities': 'briefcase',
    'scholarships': 'wallet',
    'conclusion': 'check-circle'
  };
  
  // Return the mapped icon or default to Book
  return iconMap[id] || 'book';
};

// Function to get the icon SVG based on the icon name
const getIconSvg = (iconName: string) => {
  const iconMap: Record<string, string> = {
    'book': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>',
    'graduation-cap': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 10v6M2 10l10-5 10 5-10 5z"/><path d="M6 12v5c0 2 2 3 6 3s6-1 6-3v-5"/></svg>',
    'file-text': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>',
    'languages': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m5 8 6 6"/><path d="m4 14 6-6 2-3"/><path d="M2 5h12"/><path d="M7 2h1"/><path d="m22 22-5-10-5 10"/><path d="M14 18h6"/></svg>',
    'users': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>',
    'globe': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>',
    'briefcase': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect><path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path></svg>',
    'wallet': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12V7H5a2 2 0 0 1 0-4h14v4"></path><path d="M3 5v14a2 2 0 0 0 2 2h16v-5"></path><path d="M18 12a2 2 0 0 0 0 4h4v-4Z"></path></svg>',
    'check-circle': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>',
    'home': '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>'
  };
  
  return iconMap[iconName] || iconMap['book'];
};
---

<aside class="article-sidebar bg-white border-r border-gray-200 w-64 hidden md:block overflow-y-auto max-h-[calc(100vh-80px)]">
  <div class="px-4 py-5">
    <h3 class="text-xl font-bold text-blue-900 mb-1">Содержание статьи</h3>
    <p class="text-sm text-gray-500">Выберите раздел для навигации</p>
  </div>
  
  <div class="border-t border-gray-200 px-2 py-3">
    <ul id="sidebar-links" class="space-y-1">
      <li>
        <a 
          href="#top"
          class="top-link p-2 rounded-lg text-sm flex items-center gap-2 transition-colors text-gray-700 hover:bg-gray-100"
          data-section="top"
        >
          <span class="flex-shrink-0 w-5 h-5 text-blue-600" set:html={getIconSvg('home')}></span>
          <span class="font-medium">Начало статьи</span>
        </a>
      </li>
      
      {sections.map((section) => (
        <li>
          <a 
            href={`#${section.id}`}
            class={`section-link p-2 rounded-lg text-sm flex items-center gap-2 transition-colors text-gray-700 hover:bg-gray-100`}
            data-section={section.id}
          >
            <span class="flex-shrink-0 w-5 h-5 text-blue-600" set:html={getIconSvg(getSectionIcon(section.id))}></span>
            <span class="font-medium">{section.title}</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-auto text-blue-600 chevron-icon hidden"><polyline points="9 18 15 12 9 6"></polyline></svg>
          </a>
        </li>
      ))}
    </ul>
  </div>
  
  <div class="px-4 pt-4 pb-6 border-t border-gray-200 mt-4">
    <div class="p-3 bg-blue-50 rounded-lg border border-blue-100">
      <h4 class="font-medium text-blue-800 text-sm mb-2">Понравилась статья?</h4>
      <p class="text-xs text-gray-700 mb-3">Поделитесь с друзьями или сохраните для будущего прочтения.</p>
      <div class="grid grid-cols-2 gap-2">
        <button 
          class="share-button flex items-center justify-center gap-1 px-3 py-1.5 bg-white hover:bg-gray-50 text-gray-700 rounded-lg border border-gray-200 text-xs"
          data-platform="telegram"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-600"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>
          <span>Поделиться</span>
        </button>
        <button 
          class="copy-button flex items-center justify-center gap-1 px-3 py-1.5 bg-white hover:bg-gray-50 text-gray-700 rounded-lg border border-gray-200 text-xs"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-600"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
          <span>Копировать</span>
        </button>
      </div>
    </div>
  </div>
</aside>

<!-- Mobile TOC Button -->
<button 
  id="mobileTocButton" 
  class="fixed bottom-4 right-4 z-50 rounded-full bg-blue-600 hover:bg-blue-700 text-white shadow-lg md:hidden p-3"
  aria-label="Показать содержание"
>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>
</button>

<!-- Mobile TOC Drawer -->
<div id="mobileTocDrawer" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
  <div class="bg-white w-full max-w-sm h-full absolute right-0 shadow-xl transform transition-transform duration-300 translate-x-full">
    <div class="p-4 border-b border-gray-200 flex justify-between items-center">
      <h3 class="text-lg font-bold text-blue-900">Содержание статьи</h3>
      <button id="closeMobileToc" class="p-1 rounded-full hover:bg-gray-100">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
      </button>
    </div>
    <div class="p-4 overflow-y-auto" style="max-height: calc(100vh - 64px);">
      <ul id="mobile-sidebar-links" class="space-y-2">
        <li>
          <a 
            href="#top"
            class="mobile-top-link p-3 rounded-lg text-sm flex items-center gap-3 transition-colors text-gray-700 hover:bg-gray-100"
            data-section="top"
          >
            <span class="flex-shrink-0 w-5 h-5 text-blue-600" set:html={getIconSvg('home')}></span>
            <span class="font-medium">Начало статьи</span>
          </a>
        </li>
        {sections.map((section) => (
          <li>
            <a 
              href={`#${section.id}`}
              class={`mobile-section-link p-3 rounded-lg text-sm flex items-center gap-3 transition-colors text-gray-700 hover:bg-gray-100`}
              data-section={section.id}
            >
              <span class="flex-shrink-0 w-5 h-5 text-blue-600" set:html={getIconSvg(getSectionIcon(section.id))}></span>
              <span class="font-medium">{section.title}</span>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-auto text-blue-600 mobile-chevron-icon hidden"><polyline points="9 18 15 12 9 6"></polyline></svg>
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</div>

<script>
  // Function to share content
  function shareContent(platform: string) {
    const url = window.location.href;
    const title = document.title;
    
    let shareUrl = '';
    
    switch (platform) {
      case 'twitter':
        shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`;
        break;
      case 'facebook':
        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
        break;
      case 'telegram':
        shareUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`;
        break;
    }
    
    if (shareUrl) {
      window.open(shareUrl, '_blank', 'width=600,height=400');
    }
  }
  
  // Function to copy link to clipboard
  function copyLink() {
    navigator.clipboard.writeText(window.location.href);
    showToast('Ссылка скопирована в буфер обмена');
  }
  
  // Function to show toast notification
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg z-50';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.classList.add('opacity-0', 'transition-opacity', 'duration-300');
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 3000);
  }
  
  // Function to update active section in sidebar
  function updateActiveSectionInSidebar(sectionId: string | null) {
    // Remove active class from all links
    document.querySelectorAll('.section-link, .top-link').forEach(link => {
      link.classList.remove('bg-blue-50', 'text-blue-700', 'font-medium');
      link.classList.add('text-gray-700');
      const chevron = link.querySelector('.chevron-icon');
      if (chevron) chevron.classList.add('hidden');
    });
    
    // Add active class to current section link
    if (sectionId) {
      const activeLink = document.querySelector(`.section-link[data-section="${sectionId}"]`);
      if (activeLink) {
        activeLink.classList.add('bg-blue-50', 'text-blue-700', 'font-medium');
        activeLink.classList.remove('text-gray-700');
        const chevron = activeLink.querySelector('.chevron-icon');
        if (chevron) chevron.classList.remove('hidden');
      } else if (sectionId === 'top') {
        const topLink = document.querySelector('.top-link');
        if (topLink) {
          topLink.classList.add('bg-blue-50', 'text-blue-700', 'font-medium');
          topLink.classList.remove('text-gray-700');
        }
      }
    }
    
    // Do the same for mobile
    document.querySelectorAll('.mobile-section-link, .mobile-top-link').forEach(link => {
      link.classList.remove('bg-blue-50', 'text-blue-700', 'font-medium');
      link.classList.add('text-gray-700');
      const chevron = link.querySelector('.mobile-chevron-icon');
      if (chevron) chevron.classList.add('hidden');
    });
    
    if (sectionId) {
      const mobileActiveLink = document.querySelector(`.mobile-section-link[data-section="${sectionId}"]`);
      if (mobileActiveLink) {
        mobileActiveLink.classList.add('bg-blue-50', 'text-blue-700', 'font-medium');
        mobileActiveLink.classList.remove('text-gray-700');
        const chevron = mobileActiveLink.querySelector('.mobile-chevron-icon');
        if (chevron) chevron.classList.remove('hidden');
      } else if (sectionId === 'top') {
        const mobileTopLink = document.querySelector('.mobile-top-link');
        if (mobileTopLink) {
          mobileTopLink.classList.add('bg-blue-50', 'text-blue-700', 'font-medium');
          mobileTopLink.classList.remove('text-gray-700');
        }
      }
    }
  }
  
  // Add event listeners once the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Share buttons
    const shareButtons = document.querySelectorAll('.share-button');
    shareButtons.forEach(button => {
      button.addEventListener('click', () => {
        const platform = (button as HTMLElement).dataset.platform || 'telegram';
        shareContent(platform);
      });
    });
    
    // Copy buttons
    const copyButtons = document.querySelectorAll('.copy-button');
    copyButtons.forEach(button => {
      button.addEventListener('click', copyLink);
    });
    
    // Mobile TOC functionality
    const mobileTocButton = document.getElementById('mobileTocButton');
    const mobileTocDrawer = document.getElementById('mobileTocDrawer');
    const closeMobileToc = document.getElementById('closeMobileToc');
    const drawerContent = mobileTocDrawer?.querySelector('div.bg-white');
    
    mobileTocButton?.addEventListener('click', () => {
      mobileTocDrawer?.classList.remove('hidden');
      setTimeout(() => {
        if (drawerContent) {
          drawerContent.classList.remove('translate-x-full');
        }
      }, 10);
    });
    
    const closeTocDrawer = () => {
      if (drawerContent) {
        drawerContent.classList.add('translate-x-full');
      }
      setTimeout(() => {
        mobileTocDrawer?.classList.add('hidden');
      }, 300);
    };
    
    closeMobileToc?.addEventListener('click', closeTocDrawer);
    
    mobileTocDrawer?.addEventListener('click', (e) => {
      if (e.target === mobileTocDrawer) {
        closeTocDrawer();
      }
    });
    
    // Close mobile TOC when clicking on a section
    const mobileLinks = mobileTocDrawer?.querySelectorAll('a');
    mobileLinks?.forEach(link => {
      link.addEventListener('click', closeTocDrawer);
    });
    
    // Listen for section change events from the main page
    document.addEventListener('sectionChanged', (e: Event) => {
      const customEvent = e as CustomEvent;
      if (customEvent.detail && customEvent.detail.sectionId) {
        updateActiveSectionInSidebar(customEvent.detail.sectionId);
      }
    });
    
    // Initial highlight
    const hash = window.location.hash.substring(1);
    if (hash) {
      updateActiveSectionInSidebar(hash);
    } else {
      updateActiveSectionInSidebar('top');
    }
    
    // Handle section link clicks to update active state
    document.querySelectorAll('.section-link, .top-link, .mobile-section-link, .mobile-top-link').forEach(link => {
      link.addEventListener('click', () => {
        const section = (link as HTMLElement).dataset.section;
        if (section) {
          updateActiveSectionInSidebar(section);
        }
      });
    });
  });
</script>

<style>
  .article-sidebar {
    height: 100%;
    transition: transform 0.3s ease;
  }
  
  @media (max-width: 768px) {
    .article-sidebar {
      display: none;
    }
  }
</style> 