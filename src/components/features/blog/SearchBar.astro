---
import { cn } from "@/lib/utils";
import { Search, X } from "lucide-astro";

interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<div 
  class={cn(
    "relative w-full max-w-xl mb-6 animate-fade-in", 
    className
  )}
  id="search-container"
>
  <div class="relative">
    <input
      type="text"
      id="blog-search"
      placeholder="Поиск статей..."
      class="w-full h-11 pl-10 pr-4 text-sm text-gray-700 bg-white border border-blue-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent shadow-sm"
    />
    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
      <Search size={18} class="text-gray-400" />
    </div>
    <button 
      id="clear-search" 
      class="hidden absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600"
    >
      <X size={18} />
    </button>
  </div>
  <div id="search-results-count" class="text-sm text-blue-600 mt-2 hidden"></div>
</div>

<script>
  document.addEventListener('astro:page-load', function() {
    // Get DOM elements
    const searchInput = document.getElementById('blog-search') as HTMLInputElement;
    const clearButton = document.getElementById('clear-search');
    const resultsCount = document.getElementById('search-results-count');
    
    if (!searchInput || !clearButton || !resultsCount) return;
    
    // Add event listeners
    searchInput.addEventListener('input', handleSearch);
    clearButton.addEventListener('click', clearSearch);
    
    // Check URL for search parameter
    const urlParams = new URLSearchParams(window.location.search);
    const searchQuery = urlParams.get('search');
    
    if (searchQuery) {
      searchInput.value = searchQuery;
      handleSearch();
    }
    
    function handleSearch() {
      const query = searchInput.value.trim().toLowerCase();
      
      // Toggle clear button visibility
      if (query.length > 0 && clearButton) {
        clearButton.classList.remove('hidden');
      } else if (clearButton) {
        clearButton.classList.add('hidden');
      }
      
      // Update URL without page reload
      const url = new URL(window.location.href);
      if (query) {
        url.searchParams.set('search', query);
      } else {
        url.searchParams.delete('search');
      }
      window.history.pushState({}, '', url);
      
      // Dispatch search event for the posts component to handle
      document.dispatchEvent(new CustomEvent('search-query-changed', {
        detail: { query }
      }));
    }
    
    function clearSearch() {
      if (!searchInput || !clearButton) return;
      
      searchInput.value = '';
      clearButton.classList.add('hidden');
      
      // Update URL
      const url = new URL(window.location.href);
      url.searchParams.delete('search');
      window.history.pushState({}, '', url);
      
      // Trigger search update
      document.dispatchEvent(new CustomEvent('search-query-changed', {
        detail: { query: '' }
      }));
      
      // Focus the input
      searchInput.focus();
    }
  });
</script>

<style>
  .animate-fade-in {
    animation: fadeIn 0.6s ease-in-out forwards;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
</style> 