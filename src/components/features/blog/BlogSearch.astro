---
import { getLangFromUrl } from '@/i18n/langUtils';
import { useTranslations } from '@/i18n/utils';
import { Search, X } from 'lucide-astro';
import type { BlogPost } from '@/types/blog';

interface Props {
  blogPosts: BlogPost[];
}

const { blogPosts = [] } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const statusMessages = {
  uz: {
    noResults: "Hech qanday natija topilmadi",
    searching: "Qidirilmoqda...",
    error: "Qidirishda xatolik yuz berdi",
    placeholder: "Qidirish...",
    close: "Yopish",
    noPosts: "Qidirish uchun maqolalar mavjud emas"
  },
  ru: {
    noResults: "Результатов не найдено",
    searching: "Поиск...",
    error: "Произошла ошибка при поиске",
    placeholder: "Поиск...",
    close: "Закрыть",
    noPosts: "Нет доступных статей для поиска"
  },
  en: {
    noResults: "No results found",
    searching: "Searching...",
    error: "An error occurred during search",
    placeholder: "Search...",
    close: "Close",
    noPosts: "No posts available for search"
  }
}[lang] || statusMessages.uz;

// Debug: Log the received blog posts
console.log('Received blog posts:', blogPosts);
---

<div class="max-w-4xl mx-auto mb-12">
  <button
    id="searchTrigger"
    class="flex items-center justify-center w-full p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors"
  >
    <Search size={20} class="text-gray-500 mr-2" />
    <span class="text-gray-600">
      {lang === 'uz' ? 'Maqolalarni qidirish' : lang === 'ru' ? 'Поиск статей' : 'Search articles'}
    </span>
  </button>

  <div
    id="searchOverlay"
    class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 hidden"
  >
    <div class="bg-white rounded-lg w-full max-w-2xl max-h-[80vh] overflow-hidden flex flex-col">
      <div class="p-4 border-b flex items-center">
        <Search size={20} class="text-gray-500 mr-2" />
        <input
          type="text"
          id="overlaySearchInput"
          class="flex-grow bg-transparent border-none focus:ring-0 focus:outline-none text-gray-800 placeholder-gray-500"
          placeholder={statusMessages.placeholder}
        />
        <button id="closeSearchOverlay" class="text-gray-500 hover:text-gray-700">
          <X size={20} />
          <span class="sr-only">{statusMessages.close}</span>
        </button>
      </div>

      <div class="overflow-y-auto p-4 flex-grow">
        <div id="searchResultsStatus" class="text-center py-8 text-gray-500 hidden"></div>
        <div id="searchResultsGrid" class="grid gap-6 grid-cols-1"></div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ statusMessages, lang, blogPosts }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Debug: Log the available blog posts
    console.log('Available blog posts:', blogPosts);
    
    // DOM Elements
    const elements = {
      searchTrigger: document.getElementById('searchTrigger'),
      searchOverlay: document.getElementById('searchOverlay'),
      closeSearchOverlay: document.getElementById('closeSearchOverlay'),
      overlaySearchInput: document.getElementById('overlaySearchInput'),
      searchResultsGrid: document.getElementById('searchResultsGrid'),
      searchResultsStatus: document.getElementById('searchResultsStatus')
    };

    // Validate all elements exist
    for (const [key, element] of Object.entries(elements)) {
      if (!element) {
        console.error(`Element not found: ${key}`);
        return;
      }
    }

    let lastSearchTerm = '';

    // Helper function to get localized text
    function getLocalizedText(text) {
      if (!text) return '';
      return typeof text === 'object' ? text[lang] || '' : text;
    }

    // Debounce function
    function debounce(func, wait) {
      let timeout;
      return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    function openSearchOverlay() {
      elements.searchOverlay.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      elements.overlaySearchInput.focus();
      
      if (lastSearchTerm) {
        elements.overlaySearchInput.value = lastSearchTerm;
        performSearch(lastSearchTerm);
      }
    }

    function closeSearchOverlay() {
      lastSearchTerm = elements.overlaySearchInput.value;
      elements.searchOverlay.classList.add('hidden');
      document.body.style.overflow = '';
    }

    const performSearch = debounce((searchTerm) => {
      if (!blogPosts || blogPosts.length === 0) {
        elements.searchResultsStatus.textContent = statusMessages.noPosts;
        elements.searchResultsStatus.classList.remove('hidden');
        elements.searchResultsGrid.classList.add('hidden');
        return;
      }

      elements.searchResultsGrid.innerHTML = '';
      
      if (!searchTerm.trim()) {
        elements.searchResultsStatus.classList.add('hidden');
        elements.searchResultsGrid.classList.add('hidden');
        return;
      }

      try {
        const filteredPosts = blogPosts.filter(post => {
          const title = getLocalizedText(post.title);
          const excerpt = getLocalizedText(post.excerpt);
          const searchTermLower = searchTerm.toLowerCase();

          return (
            title.toLowerCase().includes(searchTermLower) ||
            excerpt.toLowerCase().includes(searchTermLower) ||
            (post.category && post.category.toLowerCase().includes(searchTermLower))
          );
        });

        if (filteredPosts.length === 0) {
          elements.searchResultsStatus.textContent = statusMessages.noResults;
          elements.searchResultsStatus.classList.remove('hidden');
          elements.searchResultsGrid.classList.add('hidden');
        } else {
          elements.searchResultsStatus.classList.add('hidden');
          elements.searchResultsGrid.classList.remove('hidden');

          filteredPosts.forEach(post => {
            const title = getLocalizedText(post.title);
            const excerpt = getLocalizedText(post.excerpt);
            
            const postElement = document.createElement('a');
            postElement.href = `/${lang}/blog/${post.slug}`;
            postElement.className = 'flex items-start gap-4 p-3 rounded-lg hover:bg-gray-50 transition-colors';

            const date = new Date(post.publishedDate);
            const formattedDate = date.toLocaleDateString(
              lang === 'uz' ? 'uz-UZ' : lang === 'ru' ? 'ru-RU' : 'en-US',
              { year: 'numeric', month: 'short', day: 'numeric' }
            );

            postElement.innerHTML = `
              <div class="flex-shrink-0 w-16 h-16 bg-gray-200 rounded overflow-hidden">
                ${post.image ? `<img src="${post.image}" alt="${title}" class="w-full h-full object-cover">` : ''}
              </div>
              <div class="flex-grow">
                <h3 class="font-medium text-gray-900 mb-1">${title}</h3>
                <p class="text-sm text-gray-500 line-clamp-2">${excerpt}</p>
                <div class="mt-1 flex items-center text-xs text-gray-400">
                  <span>${formattedDate}</span>
                  ${post.category ? `<span class="mx-2">•</span><span>${post.category}</span>` : ''}
                </div>
              </div>
            `;

            elements.searchResultsGrid.appendChild(postElement);
          });
        }
      } catch (error) {
        console.error('Search error:', error);
        elements.searchResultsStatus.textContent = statusMessages.error;
        elements.searchResultsStatus.classList.remove('hidden');
        elements.searchResultsGrid.classList.add('hidden');
      }
    }, 300);

    // Event Listeners
    elements.searchTrigger.addEventListener('click', openSearchOverlay);
    elements.closeSearchOverlay.addEventListener('click', closeSearchOverlay);
    elements.overlaySearchInput.addEventListener('input', (e) => performSearch(e.target.value));
    elements.overlaySearchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') e.preventDefault();
    });

    elements.searchOverlay.addEventListener('click', (e) => {
      if (e.target === elements.searchOverlay) closeSearchOverlay();
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !elements.searchOverlay.classList.contains('hidden')) {
        closeSearchOverlay();
      }
    });
  });
</script>

<style>
  #searchOverlay {
    transition: opacity 0.3s ease;
    opacity: 0;
  }

  #searchOverlay:not(.hidden) {
    opacity: 1;
  }

  /* Ensure images maintain aspect ratio */
  #searchResultsGrid img {
    aspect-ratio: 16/9;
    object-fit: cover;
  }

  /* Improve accessibility */
  #searchResultsGrid a:focus {
    outline: 2px solid rgba(79, 70, 229, 0.5);
    outline-offset: 2px;
  }
</style>
