---
import UniversityCard from './UniversityFeature.svelte';
import type { Lang } from '@/i18n/langUtils';
import { getFeaturedUniversities } from '@/lib/fileSystemReader';
import type { UniversityFeatureItem } from './types';
import { universityFeatureTranslations } from '@/i18n/features/university/universityFeature';

interface Props {
  lang?: Lang;
}

const { lang = 'uz' } = Astro.props;
const universityFeatureT = universityFeatureTranslations[lang];

// Fetch universities from collections with error handling
let universities: UniversityFeatureItem[] = [];

try {
  console.log("Fetching universities in UniversityFeature.astro");
  universities = await getFeaturedUniversities(lang, 8);
  console.log(`Found ${universities.length} universities in UniversityFeature.astro`);
  
  // Fallback to static data if no universities found
  if (universities.length === 0) {
    console.log("No universities found, using fallback data");
    const staticData = await import('@/types/university');
    if (staticData && typeof staticData === 'object' && 'universities' in staticData && Array.isArray(staticData.universities)) {
      universities = [...staticData.universities] as UniversityFeatureItem[];
    }
  }
} catch (err) {
  console.error("Error fetching universities:", err);
  
  // Fallback to static data on error
  try {
    const staticData = await import('@/types/university');
    if (staticData && typeof staticData === 'object' && 'universities' in staticData && Array.isArray(staticData.universities)) {
      universities = [...staticData.universities] as UniversityFeatureItem[];
    }
  } catch (e) {
    console.error("Failed to load fallback data:", e);
  }
}
---

<UniversityCard 
  lang={lang} 
  universities={universities} 
  t={universityFeatureT}
  client:load 
/>
