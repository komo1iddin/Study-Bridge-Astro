---
import { programStore, $programFilter } from '@/data/store/programs/programStore';
import Select from '../../core/Card/Select.astro';

const currentFilter = $programFilter.get();

interface Props {
  label: string;
  name: string;
  options: Array<any>;
  onChange: string;
  value: string | undefined;
}

const languages = ['English', 'Chinese', 'Russian'].map(lang => ({
  value: lang,
  label: lang
}));
const durations = ['6 months', '1 year', '2 years', '4 years'];
const priceRanges = [
  { min: 0, max: 5000, label: '$0 - $5,000' },
  { min: 5000, max: 10000, label: '$5,000 - $10,000' },
  { min: 10000, max: 20000, label: '$10,000 - $20,000' },
  { min: 20000, max: Infinity, label: '$20,000+' }
];
---

<div class="program-filters" data-testid="program-filter">
  <h3>Filter Programs</h3>
  
  <div class="filters-grid">
    <div class="filter-group">
      <Select
        label="Language"
        name="language"
        options={languages}
        value={currentFilter.language}
        onChange="updateFilter('language', this.value)"
      />
    </div>

    <div class="filter-group">
      <Select
        label="Duration"
        name="duration"
        options={durations}
        value={currentFilter.duration}
        onChange="updateFilter('duration', this.value)"
      />
    </div>

    <div class="filter-group">
      <Select
        label="Price Range"
        name="priceRange"
        options={priceRanges.map(range => ({
          value: JSON.stringify(range),
          label: range.label
        }))}
        value={JSON.stringify(currentFilter.priceRange)}
        onChange="updatePriceRange(this.value)"
      />
    </div>
  </div>

  <button 
    class="clear-filters" 
    onclick="clearFilters()"
    disabled={!currentFilter.language && !currentFilter.duration && !(currentFilter.priceRange?.min ?? 0)}
  >
    Clear Filters
  </button>
</div>

<script>
  import { $programFilter, programStore } from '@/data/store/programs/programStore';
  let isUpdating = false;

  async function updateFilter(key: string, value: string) {
    if (isUpdating) return;
    try {
      isUpdating = true;
      const filter = $programFilter.get();
      $programFilter.set({ ...filter, [key]: value });
      await programStore.loadPrograms($programFilter.get());
    } catch (error) {
      console.error('Failed to update filter:', error);
    } finally {
      isUpdating = false;
    }
  }

  async function updatePriceRange(rangeString: string) {
    if (isUpdating) return;
    try {
      isUpdating = true;
      const range = JSON.parse(rangeString);
      const filter = $programFilter.get();
      $programFilter.set({ ...filter, priceRange: range });
      await programStore.loadPrograms($programFilter.get());
    } catch (error) {
      console.error('Failed to update price range:', error);
    } finally {
      isUpdating = false;
    }
  }

  function clearFilters() {
    programStore.clearFilter();
  }
</script>

<style>
  .program-filters {
    @apply bg-white rounded-lg shadow-md p-6 mb-8;
  }

  h3 {
    @apply text-lg font-semibold mb-4;
  }

  .filters-grid {
    @apply grid grid-cols-1 md:grid-cols-3 gap-4;
  }

  .filter-group {
    @apply space-y-2;
  }

  .clear-filters:disabled {
    @apply text-gray-400 cursor-not-allowed;
  }
</style>
