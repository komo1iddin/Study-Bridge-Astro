---
import Layout from '@/layouts/Layout.astro';
import { languages, type Lang } from '@/i18n/langUtils';
import { getCollection } from 'astro:content';
import { GraduationCap, Clock, CheckCircle, ArrowRight } from 'lucide-astro';
import Breadcrumbs from '@/components/shared/navigation/Breadcrumbs.astro';
import ContactModal from '@/components/features/contact/ContactModal.astro';
import { getTranslation } from '@/i18n/translationUtils';
import { getProgramsTranslations } from '@/i18n/features/programs';

// Get the language from the URL parameter
const { lang } = Astro.params;

// Validate the language parameter
if (!lang || !languages.includes(lang as Lang)) {
  return Astro.redirect('/uz/'); // Redirect to default language if invalid
}

// Initialize translation functions
const t = (key: string) => getTranslation(lang as Lang, key);
const programsT = getProgramsTranslations(lang as Lang);

// Get language programs
const programs = (await getCollection('programs'))
  .filter(p => p.data.type === 'language')
  .map(program => ({
    id: program.id,
    title: program.data.title[lang as keyof typeof program.data.title],
    description: program.data.description[lang as keyof typeof program.data.description],
    duration: program.data.duration,
    features: program.data.features[lang as keyof typeof program.data.features]
  }));

const breadcrumbItems = [
  { label: t('common.home'), href: `/${lang}` },
  { label: t('common.programs'), href: `/${lang}/programs` },
  { label: programsT.categories.language.title, href: `/${lang}/programs/language` }
];

// Custom meta data
const meta = {
  title: `${programsT.categories.language.title} | Study in China`,
  description: programsT.categories.language.description,
  keywords: ['language courses', 'chinese language', 'HSK', 'study in China']
};

// Server-side render this page
export const prerender = false;
---

<Layout meta={meta}>
  <div class="min-h-screen bg-gradient-to-b from-primary-50/50 to-white">
    <!-- Hero Section -->
    <section class="relative bg-gradient-to-r from-primary-600 to-primary-700 text-white py-20 overflow-hidden">
      <div class="absolute inset-0 overflow-hidden">
        <div class="absolute -top-24 -right-24 w-96 h-96 bg-primary-500/20 rounded-full"></div>
        <div class="absolute -bottom-24 -left-24 w-96 h-96 bg-primary-500/10 rounded-full"></div>
      </div>

      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <Breadcrumbs items={breadcrumbItems} class="mb-8 text-primary-100" />
        
        <div class="max-w-3xl">
          <h1 class="text-4xl md:text-5xl font-bold mb-6">{programsT.categories.language.title}</h1>
          <p class="text-xl text-primary-100 mb-8">
            {programsT.categories.language.description}
          </p>
          <div class="flex flex-wrap gap-4">
            <button
              onclick="window.uiStore.toggleContactModal(true)"
              class="inline-flex items-center px-6 py-3 bg-white text-primary-700 font-medium rounded-lg hover:bg-primary-50 transition-all duration-300"
            >
              {t('common.freeConsultation')}
              <ArrowRight class="ml-2 h-5 w-5" />
            </button>
          </div>
        </div>
      </div>
    </section>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <!-- Programs List -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {programs.map(program => (
          <div class="bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden hover:shadow-xl transition-all duration-300">
            <div class="p-6">
              <div class="flex items-center gap-4 mb-4">
                <div class="p-3 bg-primary-100 rounded-lg">
                  <GraduationCap class="w-6 h-6 text-primary-600" />
                </div>
                <div>
                  <h3 class="text-lg font-bold text-gray-900">{program.title}</h3>
                  <p class="text-sm text-gray-600">{program.duration}</p>
                </div>
              </div>

              <p class="text-gray-600 mb-4">{program.description}</p>

              <div class="flex items-center gap-2 text-sm text-gray-600 mb-4">
                <Clock class="w-4 h-4 text-primary-500" />
                <span>{programsT.labels.duration}: {program.duration}</span>
              </div>

              <div class="space-y-2 mb-6">
                {program.features.slice(0, 3).map((feature: string) => (
                  <div class="flex items-start gap-2">
                    <CheckCircle class="w-4 h-4 text-primary-600 mt-1" />
                    <span class="text-sm text-gray-700">{feature}</span>
                  </div>
                ))}
              </div>

              <a
                href={`/${lang}/programs/language/${program.id}`}
                class="inline-flex items-center text-primary-600 hover:text-primary-700 font-medium"
              >
                {programsT.labels.learnMore}
                <ArrowRight class="ml-1 h-4 w-4" />
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <ContactModal />
</Layout>

<style>
  /* Smooth transitions */
  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  /* Hover effects */
  .hover\:shadow-xl:hover {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .grid {
      gap: 1rem;
    }
    
    .text-4xl {
      font-size: 2rem;
    }
    
    .p-6 {
      padding: 1rem;
    }
  }

  /* Reduce motion */
  @media (prefers-reduced-motion: reduce) {
    .transition-all {
      transition: none;
    }
  }
</style>
