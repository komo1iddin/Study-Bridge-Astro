---
import Layout from '@/layouts/Layout.astro';
import { languages, type Lang } from '@/i18n/langUtils';
import { Phone, Mail, MessageCircle, MessageSquare } from 'lucide-astro';
import Breadcrumbs from '@/components/shared/navigation/Breadcrumbs.astro';
import { getTranslation } from '@/i18n/translationUtils';

// Get the language from the URL parameter
const { lang } = Astro.params;

// Validate the language parameter
if (!lang || !languages.includes(lang as Lang)) {
  return Astro.redirect('/uz/'); // Redirect to default language if invalid
}

// Use the language parameter to get translations
const t = (key: string) => getTranslation(lang as Lang, key);

const contactMethods = [
  {
    name: t('contacts.methods.phone'),
    value: '+1234567890',
    icon: 'phone',
    href: 'tel:+1234567890',
  },
  {
    name: t('contacts.methods.email'),
    value: 'info@studychina.com',
    icon: 'mail',
    href: 'mailto:info@studychina.com',
  },
  {
    name: t('contacts.methods.telegram'),
    value: '@studychina',
    icon: 'message-circle',
    href: 'https://t.me/studychina',
  },
  {
    name: t('contacts.methods.whatsapp'),
    value: '+1234567890',
    icon: 'message-square',
    href: 'https://wa.me/1234567890',
  },
];

const officeLocations = [
  {
    city: 'Пекин',
    address: '123 Example Street, Beijing, China',
    hours: '9:00 - 18:00',
  },
  {
    city: 'Москва',
    address: 'ул. Примерная, 123, Москва, Россия',
    hours: '9:00 - 18:00',
  },
];

// Server-side render this page
export const prerender = false;
---

<Layout meta={{ title: "Page Title", description: "Page Description" }}>
  <div class="bg-gradient-to-br from-blue-50 to-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <Breadcrumbs
        items={[
          { label: t('nav.contacts'), href: `/${lang}/contacts` }
        ]}
      />
    </div>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
      <div class="lg:grid lg:grid-cols-2 lg:gap-12">
        <!-- Contact Information -->
        <div data-aos="fade-up" data-aos-duration="800">
          <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-8">{t('contacts.title')}</h1>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-12">
            {contactMethods.map((method) => (
              <a
                href={method.href}
                class="flex items-start p-6 bg-white rounded-xl shadow-md border border-gray-100 hover:shadow-xl hover:-translate-y-1 transition-all duration-300"
                target="_blank"
                rel="noopener noreferrer"
              >
                <div class="flex-shrink-0">
                  <div class="p-3 bg-primary-50 rounded-full group-hover:bg-primary-500 transition-colors duration-300">
                    {method.icon === 'phone' && <Phone class="w-6 h-6 text-primary-600" />}
                    {method.icon === 'mail' && <Mail class="w-6 h-6 text-primary-600" />}
                    {method.icon === 'message-circle' && <MessageCircle class="w-6 h-6 text-primary-600" />}
                    {method.icon === 'message-square' && <MessageSquare class="w-6 h-6 text-primary-600" />}
                  </div>
                </div>
                <div class="ml-4">
                  <h3 class="text-lg font-semibold text-gray-900">{method.name}</h3>
                  <p class="mt-1 text-base text-gray-600">{method.value}</p>
                </div>
              </a>
            ))}
          </div>
          
          <div class="space-y-6" data-aos="fade-up" data-aos-delay="100" data-aos-duration="800">
            <h2 class="text-2xl md:text-3xl font-bold text-gray-900 mb-6">{t('contacts.offices.title')}</h2>
            <div class="w-24 h-1 bg-primary-600 mb-6"></div>
            {officeLocations.map((office) => (
              <div class="bg-white rounded-xl shadow-md p-6 border border-gray-100 hover:shadow-xl hover:-translate-y-1 transition-all duration-300">
                <h3 class="text-xl font-semibold text-gray-900">{office.city}</h3>
                <p class="mt-2 text-base text-gray-600">{office.address}</p>
                <p class="mt-1 text-sm text-gray-500">{t('contacts.offices.hours')} {office.hours}</p>
              </div>
            ))}
          </div>
        </div>
        
        <!-- Contact Form -->
        <div class="mt-12 lg:mt-0" data-aos="fade-up" data-aos-delay="200" data-aos-duration="800">
          <div class="bg-white rounded-xl shadow-md p-8 border border-gray-100">
            <h2 class="text-2xl md:text-3xl font-bold text-gray-900 mb-6">{t('contacts.form.title')}</h2>
            <div class="w-24 h-1 bg-primary-600 mb-8"></div>
            <form class="space-y-6" onsubmit="event.preventDefault();">
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700 mb-2">{t('contacts.form.name')}</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Ismingiz"
                  class="block w-full px-4 py-3 rounded-lg border-2 border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-all duration-300 bg-white"
                  required
                />
              </div>
              
              <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-2">{t('contacts.form.email')}</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  placeholder="Email"
                  class="block w-full px-4 py-3 rounded-lg border-2 border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-all duration-300 bg-white"
                  required
                />
              </div>
              
              <div>
                <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">{t('contacts.form.phone')}</label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  placeholder="Telefon"
                  class="block w-full px-4 py-3 rounded-lg border-2 border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-all duration-300 bg-white"
                />
              </div>
              
              <div>
                <label for="message" class="block text-sm font-medium text-gray-700 mb-2">{t('contacts.form.message')}</label>
                <textarea
                  id="message"
                  name="message"
                  rows="4"
                  placeholder="Xabar"
                  class="block w-full px-4 py-3 rounded-lg border-2 border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-all duration-300 bg-white"
                  required
                ></textarea>
              </div>
              
              <div>
                <button
                  type="submit"
                  class="w-full flex justify-center py-3 px-6 border border-transparent rounded-lg shadow-md text-base font-medium text-white bg-primary-600 hover:bg-primary-700 transition-all duration-300 hover:shadow-lg hover:-translate-y-1"
                >
                {t('contacts.form.submit')}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Оптимизация формы контактов
  document.addEventListener('astro:page-load', () => {
    // Предотвращаем повторную инициализацию
    if (document.querySelector('form')?.dataset.initialized === 'true') return;
    
    const form = document.querySelector('form');
    if (form) {
      // Помечаем форму как инициализированную
      form.dataset.initialized = 'true';
      
      // Предотвращаем отправку формы для демонстрации
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        // Здесь можно добавить логику для отправки формы
        // Например, fetch запрос на сервер
        
        // Для демонстрации просто меняем текст кнопки
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton && submitButton instanceof HTMLButtonElement) {
          const originalText = submitButton.textContent || '';
          submitButton.textContent = 'Отправлено!';
          submitButton.disabled = true;
          
          // Восстанавливаем кнопку через 2 секунды
          setTimeout(() => {
            submitButton.textContent = originalText;
            submitButton.disabled = false;
            form.reset();
          }, 2000);
        }
      });
    }
  });
</script>

<style>
  /* Оптимизация стилей для страницы контактов */
  input, textarea, button {
    will-change: transform;
    transform: translateZ(0);
  }
  
  /* Оптимизация для мобильных устройств */
  @media (max-width: 768px) {
    .grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }
</style>
