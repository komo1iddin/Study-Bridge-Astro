---
import Layout from '@/layouts/Layout.astro';
import { languages, type Lang } from '@/i18n/langUtils';
import UniversityDetailPage from '@/components/features/university/UniversityDetailPage/UniversityDetailPage.astro';
import ContactModal from '@/components/features/contact/ContactModal.astro';

// Server-side render this page
export const prerender = false;

interface University {
  id: string;
  name: string;
  students: string;
  fields: string[];
  location: {
    city: string;
    country: string;
  };
  isTopUniversity: boolean;
  priceRange: string;
  rating: number;
  image: string;
  logo: string;
  description: string;
  careerOpportunities: {
    companies: string[];
    salaryRanges: string[];
  };
  costs: {
    tuition: any[];
    additional: any[];
  };
  scholarships: any[];
  programs?: any[];
}

async function readYamlFiles() {
  const { promises: fs } = await import('fs');
  const path = await import('path');
  const yaml = await import('js-yaml');
  
  const universitiesDir = path.join(process.cwd(), 'src/content/universities');
  const files = await fs.readdir(universitiesDir);
  const yamlFiles = files.filter(file => file.endsWith('.yaml') && !file.startsWith('.'));
  
  return Promise.all(yamlFiles.map(async (file) => {
    const content = await fs.readFile(path.join(universitiesDir, file), 'utf-8');
    return {
      id: file.replace('.yaml', ''),
      data: yaml.load(content)
    };
  }));
}

async function getUniversityEntries() {
  try {
    return await readYamlFiles();
  } catch (error) {
    console.error('Error reading YAML files:', error);
    
    try {
      // Import getCollection dynamically to avoid issues
      const { getCollection } = await import('astro:content');
      
      // Use 'as any' to avoid type issues with dynamic import
      const entries = await (getCollection as any)('universities');
      if (!entries.length) {
        const entriesMd = await (getCollection as any)('universities-md');
        return entriesMd;
      }
      return entries;
    } catch (collectionError) {
      console.error('Error fetching from collections:', collectionError);
      return [];
    }
  }
}

function processLocation(location: string | { city: string; country: string }) {
  if (typeof location === 'string') {
    const [city = '', country = ''] = location.split(',').map(s => s.trim());
    return { city, country };
  }
  return location;
}

function createUniversityObject(entry: any, lang: string): University {
  const data = entry.data || entry;
  const slug = typeof entry.id === 'string' ? entry.id.replace(/\.(md|yaml)$/, '') : entry.id;

  return {
    id: slug,
    name: data.name?.[lang] || data.name || '',
    students: data.students?.[lang] || '',
    fields: data.fields?.[lang] || [],
    location: processLocation(data.location || ''),
    isTopUniversity: data.featured || false,
    priceRange: data.priceRange || '',
    rating: data.rating || 0,
    image: data.image || '',
    logo: data.logo || '',
    description: data.description || '',
    careerOpportunities: data.careerOpportunities || { companies: [], salaryRanges: [] },
    costs: data.costs || { tuition: [], additional: [] },
    scholarships: data.scholarships || [],
    programs: data.programs || []
  };
}

export async function getStaticPaths() {
  try {
    console.log('Creating static paths for universities');
    const universitiesEntries = await getUniversityEntries();
    
    if (!universitiesEntries.length) {
      console.error('No university entries found');
      return [];
    }

    console.log(`Found ${universitiesEntries.length} universities`);

    // Log the first university for debugging
    if (universitiesEntries.length > 0) {
      console.log('First university sample:', {
        id: universitiesEntries[0].id,
        name: universitiesEntries[0].data.name,
      });
    }

    // Create paths for each language and university combination
    const paths = [];
    
    for (const lang of languages) {
      for (const entry of universitiesEntries) {
        const id = typeof entry.id === 'string' ? entry.id.replace(/\.(md|yaml)$/, '') : entry.id;
        
        // Ensure the university id is valid
        if (!id) {
          console.error('University without id found:', entry);
          continue;
        }
        
        console.log(`Creating path for lang=${lang}, id=${id}`);
        paths.push({
          params: { lang, id },
          props: { id } // Only pass the ID, we'll fetch the university in the component
        });
      }
    }
    
    console.log(`Generated ${paths.length} static paths for universities`);
    return paths;
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

// Get the language and id from the URL parameter
const { lang, id } = Astro.params;

// Validate the ID
if (!id) {
  console.error('No ID parameter found');
  return Astro.redirect(`/${lang || 'uz'}/404`);
}

// Validate the language parameter
if (!lang || !languages.includes(lang as Lang)) {
  return Astro.redirect('/uz/'); // Redirect to default language if invalid
}

// Initialize university data variable
let university: University | undefined;
let metaTitle = '';
let metaDescription = '';

try {
  console.log(`Fetching university with ID: ${id} for language: ${lang}`);
  
  // Get all universities
  const universitiesEntries = await getUniversityEntries();
  
  // Find the university with the matching ID
  const entry = universitiesEntries.find(entry => {
    const entryId = typeof entry.id === 'string' ? entry.id.replace(/\.(md|yaml)$/, '') : entry.id;
    return entryId === id;
  });
  
  if (!entry) {
    console.error(`University not found with ID: ${id}`);
    return Astro.redirect(`/${lang}/404`);
  }
  
  // Create the university object
  university = createUniversityObject(entry, lang);
  console.log(`Successfully processed university data for: ${id}`);
  
  // Set meta information
  metaTitle = university.name;
  metaDescription = university.description;
} catch (e) {
  console.error(`Error processing university with ID ${id}:`, e);
  return Astro.redirect(`/${lang}/404`);
}

// If no university found, redirect to language-specific 404
if (!university) {
  return Astro.redirect(`/${lang}/404`);
}
---

<Layout meta={{ title: metaTitle, description: metaDescription }}>
  <UniversityDetailPage university={university} />
  <ContactModal />
</Layout>

<style>
  html {
    scroll-behavior: smooth;
  }
</style>
