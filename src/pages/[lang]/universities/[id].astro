---
import Layout from '@/layouts/Layout.astro';
import { languages, type Lang } from '@/i18n/langUtils';


import { getCollection } from 'astro:content';
import UniversityDetailPage from '@/components/features/university/UniversityDetailPage/UniversityDetailPage.astro';
import ContactModal from '@/components/features/contact/ContactModal.astro';

// Get the language from the URL parameter
const { lang } = Astro.params;

// Validate the language parameter
if (!lang || !languages.includes(lang as Lang)) {
  return Astro.redirect('/uz/'); // Redirect to default language if invalid
}
export async function getStaticPaths() {
  try {
    // Get all universities from content collections
    let universitiesEntries = [];
    
    // Try to get YAML files directly from the filesystem
    try {
      const fs = await import('fs/promises');
      const path = await import('path');
      
      const universitiesDir = path.join(process.cwd(), 'src/content/universities');
      console.log('University detail - Universities directory:', universitiesDir);
      
      const files = await fs.readdir(universitiesDir);
      console.log('University detail - Files in directory:', files);
      
      const yamlFiles = files.filter(file => file.endsWith('.yaml') && !file.startsWith('.'));
      console.log('University detail - YAML files found:', yamlFiles);
      
      // Read and parse each YAML file
      const yaml = await import('js-yaml');
      universitiesEntries = await Promise.all(yamlFiles.map(async (file) => {
        const filePath = path.join(universitiesDir, file);
        const content = await fs.readFile(filePath, 'utf-8');
        const data = yaml.load(content);
        return {
          id: file.replace('.yaml', ''),
          data: data
        };
      }));
      
      console.log('University detail - Parsed YAML entries:', universitiesEntries.length);
    } catch (fsError) {
      console.error('University detail - Error reading YAML files:', fsError);
      // Fallback to content collections
      universitiesEntries = await getCollection('universities');
      console.log('University detail - Universities from content collection:', universitiesEntries.length);
      
      if (!universitiesEntries.length) {
        // Fallback to universities-md collection if universities is empty
        universitiesEntries = await getCollection('universities-md');
        console.log('University detail - Universities from universities-md collection:', universitiesEntries.length);
      }
    }
    
    // If no universities found in content collections, return empty array
    // This will cause 404 for any university that doesn't exist
    if (!universitiesEntries.length) {
      console.error('No university entries found in content collections or YAML files');
      return [];
    }
    
    // Create a list of valid university IDs for later checking
    const validUniversityIds = universitiesEntries.map(entry => {
      if (typeof entry.id === 'string') {
        return entry.id.replace(/\.(md|yaml)$/, '');
      }
      return entry.id;
    });
    console.log('Valid university IDs:', validUniversityIds);
    
    const paths = [];
    
    for (const entry of universitiesEntries) {
      // Check if we're dealing with a content collection entry or our custom YAML entry
      const data = entry.data || entry;
      let slug;
      
      if (typeof entry.id === 'string') {
        slug = entry.id.replace(/\.(md|yaml)$/, '');
      } else {
        // If we're using our custom YAML parser, the id is already processed
        slug = entry.id;
      }
      
      for (const lang of ['uz', 'ru', 'en']) {
        // Safely access nested properties with fallbacks
        const name = data.name && typeof data.name === 'object' ? data.name[lang] : data.name;
        const students = data.students && typeof data.students === 'object' ? data.students[lang] : '';
        const fields = data.fields && typeof data.fields === 'object' ? data.fields[lang] : [];
        const location = data.location || '';
        const city = typeof location === 'string' ? location.split(',')[0]?.trim() || '' : location?.city || '';
        const country = typeof location === 'string' ? location.split(',')[1]?.trim() || '' : location?.country || '';
        
        paths.push({
          params: { 
            lang,
            id: slug
          },
          props: { 
            university: {
              ...data,
              id: slug,
              name: name,
              students: students,
              fields: fields,
              location: {
                city: city,
                country: country
              },
              isTopUniversity: data.featured || false,
              priceRange: data.priceRange || '',
              rating: data.rating || 0,
              image: data.image || '',
              logo: data.logo || '',
              description: data.description || '',
              // Ensure careerOpportunities, costs, and scholarships are properly passed
              careerOpportunities: data.careerOpportunities || {
                companies: [],
                salaryRanges: []
              },
              costs: data.costs || {
                tuition: [],
                additional: []
              },
              scholarships: data.scholarships || []
            },
            validUniversityIds
          }
        });
      }
    }
    
    return paths;
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

interface Props {
  university: any;
}

const { id } = Astro.params;
const { university, validUniversityIds } = Astro.props;

// Check if university exists in props
if (!university) {
  return Astro.redirect(`/${lang}/404`);
}

// Check if the requested ID is in the list of valid university IDs
if (!validUniversityIds.includes(id)) {
  console.log(`Invalid university ID: ${id}. Redirecting to 404.`);
  return Astro.redirect(`/${lang}/404`);
}

// Additional check to ensure the university ID matches the requested ID
// This prevents showing a different university when the requested one doesn't exist
if (university.id !== id) {
  console.log(`University ID mismatch: requested ${id}, got ${university.id}. Redirecting to 404.`);
  return Astro.redirect(`/${lang}/404`);
}

// Ensure university has programs property
const programs = university.programs || [];

---

<Layout meta={{ title: "Page Title", description: "Page Description" }}>
  
      <UniversityDetailPage university={university} />
  <ContactModal />
</Layout>

<style>
  html {
    scroll-behavior: smooth;
  }
</style>

<script>
  // Any client-side scripts you need
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize any necessary client-side functionality
  });
</script>