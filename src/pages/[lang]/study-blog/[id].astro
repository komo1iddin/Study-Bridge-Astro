---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { useTranslations } from '@/i18n/utils';
import { blogPosts, getRelatedPosts } from '@/lib/blog';
import BlogCard from '@/components/blog/BlogCard.astro';
import Breadcrumb from '@/components/blog/Breadcrumb.astro';
import ArticleSidebar from '@/components/blog/ArticleSidebar.astro';
import ReadingProgress from '@/components/blog/ReadingProgress.astro';
import type { Lang } from '@/i18n/langUtils';

export function getStaticPaths() {
  const paths: { params: { lang: string; id: string }; props: { post: any } }[] = [];

  ['ru', 'en', 'uz'].forEach(lang => {
    blogPosts.forEach(post => {
      paths.push({
        params: { lang, id: post.id },
        props: { post }
      });
    });
  });

  return paths;
}

const { lang } = Astro.params;
const { post } = Astro.props;

// Validate language parameter
if (!['ru', 'en', 'uz'].includes(lang ?? '')) {
  return Astro.redirect('/ru/study-blog/' + post.id);
}

// Get translations for this language
const t = useTranslations(lang as Lang);

// Find related posts
const relatedPosts = getRelatedPosts(post.id, 3);

// Prepare metadata for the page
const meta = {
  title: `${post.title} | Study in China`,
  description: post.excerpt
};

// Extract article sections manually since we can't use DOM during SSR
interface ArticleSection {
  id: string;
  title: string;
}

// Extract sections from the post content by finding h2 tags with id attributes
function extractSectionsFromContent(content: string): ArticleSection[] {
  const sections: ArticleSection[] = [];
  
  // Use regex to find all h2 tags with an id attribute
  const h2Regex = /<h2[^>]*id="([^"]+)"[^>]*>(.*?)<\/h2>/g;
  let match;
  
  while ((match = h2Regex.exec(content)) !== null) {
    const id = match[1];
    // Remove any HTML tags inside the title to get plain text
    const title = match[2].replace(/<[^>]*>/g, '').trim();
    sections.push({ id, title });
  }
  
  return sections;
}

// Get language-specific section titles based on current language
function getLocalizedFallbackSections(language: string): ArticleSection[] {
  // Default to Russian if language not supported
  if (!['ru', 'en', 'uz'].includes(language)) {
    language = 'ru';
  }
  
  if (language === 'en') {
    return [
      { id: 'why-study-in-china', title: 'Why Study in China' },
      { id: 'application-process', title: 'Application Process' },
      { id: 'language-requirements', title: 'Language Requirements' },
      { id: 'living-in-china', title: 'Living in China' },
      { id: 'cultural-adaptation', title: 'Cultural Adaptation' },
      { id: 'scholarships', title: 'Scholarships and Funding' },
      { id: 'conclusion', title: 'Conclusion' }
    ];
  } else if (language === 'uz') {
    return [
      { id: 'why-study-in-china', title: 'Xitoyda o\'qish uchun sabablar' },
      { id: 'application-process', title: 'Ariza topshirish jarayoni' },
      { id: 'language-requirements', title: 'Til talablari' },
      { id: 'living-in-china', title: 'Xitoyda yashash' },
      { id: 'cultural-adaptation', title: 'Madaniy moslashish' },
      { id: 'scholarships', title: 'Stipendiyalar va moliyalashtirish' },
      { id: 'conclusion', title: 'Xulosa' }
    ];
  } else {
    // Russian (default)
    return [
      { id: 'why-study-in-china', title: 'Почему учиться в Китае' },
      { id: 'application-process', title: 'Процесс подачи заявления' },
      { id: 'language-requirements', title: 'Языковые требования' },
      { id: 'living-in-china', title: 'Жизнь в Китае' },
      { id: 'cultural-adaptation', title: 'Культурная адаптация' },
      { id: 'scholarships', title: 'Стипендии и финансирование' },
      { id: 'conclusion', title: 'Заключение' }
    ];
  }
}

// Get sections from post content or use fallback if content is empty/invalid
const postSections = post.content ? extractSectionsFromContent(post.content) : [];

// Get language-specific fallback sections
const fallbackSections = getLocalizedFallbackSections(lang as string);

// Use extracted sections or fallback to language-specific manual sections if none found
const articleSections = postSections.length > 0 ? postSections : fallbackSections;

// Define breadcrumb items for navigation
const breadcrumbItems = [
  { label: t('common.home'), href: `/${lang}` },
  { label: t('common.blog'), href: `/${lang}/study-blog` },
  { label: post.title, href: `/${lang}/study-blog/${post.id}`, active: true }
];

// Prepare data for reading progress
const totalSections = articleSections.length;
---

<BaseLayout meta={meta}>
  <ReadingProgress totalSections={totalSections} />
  
  <div class="max-w-6xl mx-auto px-4 md:px-8 mt-6">
    <div class="mb-8">
      <Breadcrumb items={breadcrumbItems} />
    </div>
    
    <div class="flex flex-col md:flex-row gap-8">
      <div class="md:w-64 shrink-0">
        <div class="md:sticky md:top-20">
          <ArticleSidebar sections={articleSections} />
        </div>
      </div>
      
      <main class="flex-1 pb-16">
        <article class="max-w-3xl" id="top">
          <!-- Post Header -->
          <header class="mb-8">
            <div class="flex items-center gap-2 text-sm text-gray-500 mb-4">
              <span class="bg-blue-100 text-blue-800 px-2.5 py-0.5 rounded-full font-medium">
                {post.categories[0]}
              </span>
              <span>•</span>
              <time datetime={post.publishedDate}>{post.publishedDate}</time>
              <span>•</span>
              <span>{post.readTime}</span>
            </div>
            
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">{post.title}</h1>
            
            <p class="text-xl text-gray-600 leading-relaxed">{post.excerpt}</p>
            
            <div class="flex items-center mt-6">
              <img 
                src={post.author.avatar} 
                alt={post.author.name}
                class="w-12 h-12 rounded-full object-cover border-2 border-white shadow-sm"
              />
              <div class="ml-3">
                <p class="font-medium text-gray-900">{post.author.name}</p>
                <p class="text-sm text-gray-500">{post.author.bio}</p>
              </div>
            </div>
          </header>
          
          <!-- Post Cover Image -->
          <div class="mb-10 rounded-xl overflow-hidden shadow-md">
            <img 
              src={post.coverImage}
              alt={post.title}
              class="w-full h-auto object-cover"
            />
          </div>
          
          <!-- Post Content -->
          <div class="article-content prose prose-lg prose-blue max-w-none mb-12" data-total-sections={totalSections}>
            {post.content ? (
              <div set:html={post.content} />
            ) : (
              <div class="text-gray-700">
                <p>Контент в разработке. Мы скоро добавим полное содержание этой статьи.</p>
              </div>
            )}
          </div>
          
          <!-- Post Categories & Tags -->
          <div class="border-t border-gray-100 pt-8 mt-8">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Категории</h3>
            <div class="flex flex-wrap gap-2">
              {post.categories.map((category: string) => (
                <a 
                  href={`/${lang}/study-blog?category=${category}`}
                  class="bg-blue-50 text-blue-800 px-3 py-1 rounded-lg text-sm font-medium hover:bg-blue-100 transition-colors"
                >
                  {category}
                </a>
              ))}
            </div>
          </div>

          <!-- Related Posts Section -->
          {relatedPosts.length > 0 && (
            <div class="border-t border-gray-100 pt-8 mt-8">
              <h3 class="text-xl font-bold text-gray-900 mb-6">Похожие статьи</h3>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                {relatedPosts.map((relatedPost: any) => (
                  <BlogCard post={relatedPost} variant="minimal" lang={lang} />
                ))}
              </div>
            </div>
          )}
          
          <!-- Social Sharing Buttons (for mobile only) -->
          <div class="mt-8 pt-6 border-t border-gray-100 md:hidden">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Поделиться статьей</h3>
            <div class="flex space-x-3">
              <button 
                class="share-button flex items-center justify-center gap-2 px-4 py-2 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-lg"
                data-platform="twitter"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>
                Twitter
              </button>
              <button 
                class="share-button flex items-center justify-center gap-2 px-4 py-2 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-lg"
                data-platform="facebook"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg>
                Facebook
              </button>
              <button 
                class="share-button flex items-center justify-center gap-2 px-4 py-2 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-lg"
                data-platform="telegram"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>
                Telegram
              </button>
              <button 
                class="copy-button flex items-center justify-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
                Копировать
              </button>
            </div>
          </div>
        </article>
      </main>
    </div>
  </div>
</BaseLayout>

<style>
  .article-content {
    font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
    color: #333;
    line-height: 1.7;
  }
  
  .article-content h2 {
    font-size: 1.875rem;
    font-weight: 700;
    color: #1a202c;
    margin-top: 2.5rem;
    margin-bottom: 1.25rem;
    scroll-margin-top: 100px;
  }
  
  .article-content h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #2d3748;
    margin-top: 2rem;
    margin-bottom: 1rem;
    scroll-margin-top: 100px;
  }
  
  .article-content p {
    margin-bottom: 1.5rem;
  }
  
  .article-content ul, 
  .article-content ol {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }
  
  .article-content li {
    margin-bottom: 0.5rem;
  }
  
  .article-content img {
    border-radius: 0.5rem;
    margin: 2rem 0;
    max-width: 100%;
    height: auto;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  .article-content blockquote {
    border-left: 4px solid #4299e1;
    padding-left: 1rem;
    font-style: italic;
    color: #4a5568;
    margin: 1.5rem 0;
  }
  
  .article-content a {
    color: #3182ce;
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
  }
  
  .article-content a:hover {
    color: #2b6cb0;
    text-decoration-thickness: 2px;
  }
  
  .article-content code {
    font-family: 'SF Mono', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;
    background-color: #edf2f7;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  .article-content pre {
    background-color: #2d3748;
    color: #e2e8f0;
    padding: 1.25rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
    font-size: 0.875em;
  }
  
  .article-content table {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem 0;
  }
  
  .article-content table th,
  .article-content table td {
    padding: 0.75rem;
    border: 1px solid #e2e8f0;
  }
  
  .article-content table th {
    background-color: #f7fafc;
    font-weight: 600;
    text-align: left;
  }
  
  /* Info boxes */
  .article-content .info-box {
    background-color: #ebf8ff;
    border-left: 4px solid #4299e1;
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0.25rem;
  }
  
  .article-content .warning-box {
    background-color: #fffbeb;
    border-left: 4px solid #f59e0b;
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0.25rem;
  }
  
  /* Image gallery */
  .article-content .image-gallery {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin: 2rem 0;
  }
  
  @media (max-width: 640px) {
    .article-content .image-gallery {
      grid-template-columns: 1fr;
    }
  }
  
  /* Scroll animations */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideUp {
    from { transform: translateY(20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }
  
  .fadeIn {
    animation: fadeIn 0.5s ease-out forwards;
  }
  
  .slideUp {
    animation: slideUp 0.5s ease-out forwards;
  }
</style>

<script>
  // Function to share content
  function shareContent(platform: string) {
    const url = window.location.href;
    const title = document.title;
    
    let shareUrl = '';
    
    switch (platform) {
      case 'twitter':
        shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`;
        break;
      case 'facebook':
        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
        break;
      case 'telegram':
        shareUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`;
        break;
    }
    
    if (shareUrl) {
      window.open(shareUrl, '_blank', 'width=600,height=400');
    }
  }
  
  // Function to copy link to clipboard
  function copyLink() {
    navigator.clipboard.writeText(window.location.href);
    showToast('Ссылка скопирована в буфер обмена');
  }
  
  // Function to show toast notification
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg z-50';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.classList.add('opacity-0', 'transition-opacity', 'duration-300');
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 3000);
  }
  
  // Observer for sections to update the sidebar
  function setupSectionObserver() {
    const sections = document.querySelectorAll('h2[id], h3[id]');
    if (sections.length > 0) {
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute('id');
            if (id) {
              // Create and dispatch a custom event to notify the sidebar
              const event = new CustomEvent('sectionChanged', {
                detail: { sectionId: id }
              });
              document.dispatchEvent(event);
            }
          }
        });
      }, { rootMargin: '-100px 0px -80% 0px' });
      
      sections.forEach(section => observer.observe(section));
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    // Share buttons
    const shareButtons = document.querySelectorAll('.share-button');
    shareButtons.forEach(button => {
      button.addEventListener('click', () => {
        const platform = (button as HTMLElement).dataset.platform || 'twitter';
        shareContent(platform);
      });
    });
    
    // Copy buttons
    const copyButtons = document.querySelectorAll('.copy-button');
    copyButtons.forEach(button => {
      button.addEventListener('click', copyLink);
    });
    
    // Setup section observer for sidebar navigation
    setupSectionObserver();
  });
</script> 