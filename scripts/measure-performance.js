#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Puppeteer –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
 * 
 * –ó–∞–ø—É—Å–∫: node measure-performance.js
 * 
 * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª performance-results.json
 */

import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ ES –º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:4321'; // URL –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const PAGES_TO_TEST = [
  '/',
  '/uz/contacts',
  '/uz/about',
  '/uz/services',
  '/uz/blog'
];
const ITERATIONS = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function measurePageLoad(page, url) {
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
  const navigationStart = Date.now();
  await page.goto(url, { waitUntil: 'networkidle0' });
  const navigationEnd = Date.now();
  
  // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const performanceMetrics = await page.evaluate(() => {
    const perfEntries = performance.getEntriesByType('navigation');
    if (perfEntries.length > 0) {
      const navigationEntry = perfEntries[0];
      return {
        domContentLoaded: navigationEntry.domContentLoadedEventEnd - navigationEntry.startTime,
        load: navigationEntry.loadEventEnd - navigationEntry.startTime,
        firstPaint: performance.getEntriesByName('first-paint')[0]?.startTime || 0,
        firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime || 0
      };
    }
    return null;
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  return {
    url,
    navigationTime: navigationEnd - navigationStart,
    ...performanceMetrics
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runPerformanceTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
  const browser = await puppeteer.launch({
    headless: 'new', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π headless —Ä–µ–∂–∏–º
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const page = await browser.newPage();
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const results = {};
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  for (const pageUrl of PAGES_TO_TEST) {
    const fullUrl = `${BASE_URL}${pageUrl}`;
    console.log(`\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${fullUrl}`);
    
    const pageResults = [];
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for (let i = 0; i < ITERATIONS; i++) {
      console.log(`   –ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}/${ITERATIONS}...`);
      const result = await measurePageLoad(page, fullUrl);
      pageResults.push(result);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const avgNavigationTime = pageResults.reduce((sum, r) => sum + r.navigationTime, 0) / ITERATIONS;
    const avgDomContentLoaded = pageResults.reduce((sum, r) => sum + r.domContentLoaded, 0) / ITERATIONS;
    const avgLoad = pageResults.reduce((sum, r) => sum + r.load, 0) / ITERATIONS;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results[pageUrl] = {
      averageNavigationTime: avgNavigationTime,
      averageDomContentLoaded: avgDomContentLoaded,
      averageLoadTime: avgLoad,
      iterations: pageResults
    };
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log(`   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${avgNavigationTime.toFixed(2)}ms`);
    console.log(`   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è DOMContentLoaded: ${avgDomContentLoaded.toFixed(2)}ms`);
    console.log(`   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: ${avgLoad.toFixed(2)}ms`);
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
  await browser.close();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  const resultsPath = path.join(__dirname, '../performance-results.json');
  fs.writeFileSync(resultsPath, JSON.stringify(results, null, 2));
  
  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: performance-results.json');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runPerformanceTest().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error);
  process.exit(1);
});
